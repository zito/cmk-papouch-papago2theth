#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# vim:sta:si:sw=4:sts=4:et:

# Check has been developed using:
# Papago 2TH ETH - Thermo / Humidity / Dew point meter with eth if
# Device Firmware Version   1.7/15
# http://www.papouch.com/en/shop/product/papago-2th-eth-temperature-and-humidity-meter-with-ethernet/
# Václav Ovsík <vaclav.ovsik@gmail.com>

# NOTE: Careful when replacing the *-import below with a more specific import. This can cause
# problems because it might remove variables from the check-context which are necessary for
# resolving legacy discovery results such as [("SUMMARY", "diskstat_default_levels")]. Furthermore,
# it might also remove variables needed for accessing discovery rulesets.
from cmk.base.check_legacy_includes.humidity import *  # pylint: disable=wildcard-import,unused-wildcard-import
# NOTE: Careful when replacing the *-import below with a more specific import. This can cause
# problems because it might remove variables from the check-context which are necessary for
# resolving legacy discovery results such as [("SUMMARY", "diskstat_default_levels")]. Furthermore,
# it might also remove variables needed for accessing discovery rulesets.
from cmk.base.check_legacy_includes.temperature import *  # pylint: disable=wildcard-import,unused-wildcard-import

# papago_temp_V02-MIB::deviceName.0 = STRING: "termo-srv"
# papago_temp_V02-MIB::psAlarmString.0 = ""
# papago_temp_V02-MIB::inChType.1 = INTEGER: 1
# papago_temp_V02-MIB::inChType.2 = INTEGER: 2
# papago_temp_V02-MIB::inChType.3 = INTEGER: 3
# papago_temp_V02-MIB::inChType.4 = INTEGER: 0
# papago_temp_V02-MIB::inChType.5 = INTEGER: 0
# papago_temp_V02-MIB::inChType.6 = INTEGER: 0
# papago_temp_V02-MIB::inChStatus.1 = INTEGER: 0
# papago_temp_V02-MIB::inChStatus.2 = INTEGER: 0
# papago_temp_V02-MIB::inChStatus.3 = INTEGER: 0
# papago_temp_V02-MIB::inChStatus.4 = INTEGER: 4
# papago_temp_V02-MIB::inChStatus.5 = INTEGER: 4
# papago_temp_V02-MIB::inChStatus.6 = INTEGER: 4
# papago_temp_V02-MIB::inChValue.1 = INTEGER: 231
# papago_temp_V02-MIB::inChValue.2 = INTEGER: 266
# papago_temp_V02-MIB::inChValue.3 = INTEGER: 28
# papago_temp_V02-MIB::inChValue.4 = INTEGER: 0
# papago_temp_V02-MIB::inChValue.5 = INTEGER: 0
# papago_temp_V02-MIB::inChValue.6 = INTEGER: 0
# papago_temp_V02-MIB::inChUnits.1 = INTEGER: 0
# papago_temp_V02-MIB::inChUnits.2 = INTEGER: 0
# papago_temp_V02-MIB::inChUnits.3 = INTEGER: 0
# papago_temp_V02-MIB::inChUnits.4 = INTEGER: 0
# papago_temp_V02-MIB::inChUnits.5 = INTEGER: 0
# papago_temp_V02-MIB::inChUnits.6 = INTEGER: 0
# papago_temp_V02-MIB::channelEntry.5.1 = NULL

# .1.3.6.1.4.1.18248.31.1.1.1.0 = STRING: "termo-srv"
# .1.3.6.1.4.1.18248.31.1.1.2.0 = ""
# .1.3.6.1.4.1.18248.31.1.2.1.1.1.1 = INTEGER: 1
# .1.3.6.1.4.1.18248.31.1.2.1.1.1.2 = INTEGER: 2
# .1.3.6.1.4.1.18248.31.1.2.1.1.1.3 = INTEGER: 3
# .1.3.6.1.4.1.18248.31.1.2.1.1.1.4 = INTEGER: 0
# .1.3.6.1.4.1.18248.31.1.2.1.1.1.5 = INTEGER: 0
# .1.3.6.1.4.1.18248.31.1.2.1.1.1.6 = INTEGER: 0
# .1.3.6.1.4.1.18248.31.1.2.1.1.2.1 = INTEGER: 0
# .1.3.6.1.4.1.18248.31.1.2.1.1.2.2 = INTEGER: 0
# .1.3.6.1.4.1.18248.31.1.2.1.1.2.3 = INTEGER: 0
# .1.3.6.1.4.1.18248.31.1.2.1.1.2.4 = INTEGER: 4
# .1.3.6.1.4.1.18248.31.1.2.1.1.2.5 = INTEGER: 4
# .1.3.6.1.4.1.18248.31.1.2.1.1.2.6 = INTEGER: 4
# .1.3.6.1.4.1.18248.31.1.2.1.1.3.1 = INTEGER: 231
# .1.3.6.1.4.1.18248.31.1.2.1.1.3.2 = INTEGER: 265
# .1.3.6.1.4.1.18248.31.1.2.1.1.3.3 = INTEGER: 28
# .1.3.6.1.4.1.18248.31.1.2.1.1.3.4 = INTEGER: 0
# .1.3.6.1.4.1.18248.31.1.2.1.1.3.5 = INTEGER: 0
# .1.3.6.1.4.1.18248.31.1.2.1.1.3.6 = INTEGER: 0
# .1.3.6.1.4.1.18248.31.1.2.1.1.4.1 = INTEGER: 0
# .1.3.6.1.4.1.18248.31.1.2.1.1.4.2 = INTEGER: 0
# .1.3.6.1.4.1.18248.31.1.2.1.1.4.3 = INTEGER: 0
# .1.3.6.1.4.1.18248.31.1.2.1.1.4.4 = INTEGER: 0
# .1.3.6.1.4.1.18248.31.1.2.1.1.4.5 = INTEGER: 0
# .1.3.6.1.4.1.18248.31.1.2.1.1.4.6 = INTEGER: 0
# .1.3.6.1.4.1.18248.31.1.2.1.1.5.1 = NULL

def parse_papouch_papago2theth(info):
    map_sensor_type = {
        "1": "temp",
        "2": "humidity",
        "3": "dewpoint",
    }

    map_sensor_human = {
        "1": "Temperature",
        "2": "Humidity",
        "3": "Dew point",
    }

    oid_units = ( "c", "%", "c" )

    sensor_name = ( 'A', 'B' )

    map_states = {
        "0": (0, "OK"),
        "1": (3, "not available"),
        "2": (1, "over-flow"),
        "3": (1, "under-flow"),
        "4": (2, "error"),
    }

    parsed = {}
    for oidend, typeid, state, reading_str in info:
        if state != "4":
            i = int(oidend) -1
            sensor_ty = map_sensor_type[typeid]
            sensor_unit = oid_units[i % 3]
            parsed.setdefault(sensor_ty, {})
            parsed[sensor_ty].setdefault("Sensor %s %s" \
                    % (sensor_name[i//3], map_sensor_human[typeid]), (
                map_states[state],
                float(reading_str) / 10,
                sensor_unit,
            ))

    return parsed


#   .--temperature---------------------------------------------------------.
#   |      _                                      _                        |
#   |     | |_ ___ _ __ ___  _ __   ___ _ __ __ _| |_ _   _ _ __ ___       |
#   |     | __/ _ \ '_ ` _ \| '_ \ / _ \ '__/ _` | __| | | | '__/ _ \      |
#   |     | ||  __/ | | | | | |_) |  __/ | | (_| | |_| |_| | | |  __/      |
#   |      \__\___|_| |_| |_| .__/ \___|_|  \__,_|\__|\__,_|_|  \___|      |
#   |                       |_|                                            |
#   +----------------------------------------------------------------------+
#   |                               main check                             |
#   '----------------------------------------------------------------------'


def inventory_papouch_papago2theth_temp(parsed, what):
    for item in parsed[what]:
        yield item, {}


def check_papouch_papago2theth_temp(item, params, parsed, what):
    if item in parsed[what]:
        (state, state_readable), reading, unit = parsed[what][item]
        return check_temperature(reading,
                                 params,
                                 "papouch_papago2theth_%s_%s" % (what, item),
                                 dev_unit=unit,
                                 dev_status=state,
                                 dev_status_name=state_readable)


check_info['papouch_papago2theth'] = {
    'parse_function'            : parse_papouch_papago2theth,
    'inventory_function'        : lambda parsed: \
        inventory_papouch_papago2theth_temp(parsed, "temp"),
    'check_function'            : lambda item, params, parsed: \
        check_papouch_papago2theth_temp(item, params, parsed, "temp"),
    'service_description'       : '%s',
    'has_perfdata'              : True,
    'snmp_info'                 : (".1.3.6.1.4.1.18248.31.1.2.1.1", [
                                        OID_END,
                                        "1",        # papago_temp_V02-MIB::inChType
                                        "2",        # papago_temp_V02-MIB::inChStatus
                                        "3",        # papago_temp_V02-MIB::inChValue
                                  ]),
    'snmp_scan_function'        : lambda oid: "Papago_2TH_ETH" in oid(".1.3.6.1.2.1.1.1.0") and \
                                         oid(".1.3.6.1.2.1.1.2.0").startswith(".0.10.43.6.1.4.1"),
    'group'                     : 'temperature',
}

#.
#   .--dew point-----------------------------------------------------------.
#   |                _                             _       _               |
#   |             __| | _____      __  _ __   ___ (_)_ __ | |_             |
#   |            / _` |/ _ \ \ /\ / / | '_ \ / _ \| | '_ \| __|            |
#   |           | (_| |  __/\ V  V /  | |_) | (_) | | | | | |_             |
#   |            \__,_|\___| \_/\_/   | .__/ \___/|_|_| |_|\__|            |
#   |                                 |_|                                  |
#   '----------------------------------------------------------------------'


check_info['papouch_papago2theth.dewpoint'] = {
    'inventory_function'        : lambda parsed: \
        inventory_papouch_papago2theth_temp(parsed, "dewpoint"),
    'check_function'            : lambda item, params, parsed: \
        check_papouch_papago2theth_temp(item, params, parsed, "dewpoint"),
    'service_description'       : '%s',
    'has_perfdata'              : True,
    'group'                     : 'temperature',
}

#.
#   .--humidity------------------------------------------------------------.
#   |              _                     _     _ _ _                       |
#   |             | |__  _   _ _ __ ___ (_) __| (_) |_ _   _               |
#   |             | '_ \| | | | '_ ` _ \| |/ _` | | __| | | |              |
#   |             | | | | |_| | | | | | | | (_| | | |_| |_| |              |
#   |             |_| |_|\__,_|_| |_| |_|_|\__,_|_|\__|\__, |              |
#   |                                                  |___/               |
#   '----------------------------------------------------------------------'

# Suggested by customer
papouch_papago2theth_humidity_default_levels = (8, 12, 30, 35)


def inventory_papouch_papago2theth_humidity(parsed):
    for item in parsed["humidity"]:
        yield item, "papouch_papago2theth_humidity_default_levels"


def check_papouch_papago2theth_humidity(item, params, parsed):
    if item in parsed["humidity"]:
        (state, state_readable), reading, _unit = parsed["humidity"][item]
        yield state, "Status: %s" % state_readable
        yield check_humidity(reading, params)


check_info['papouch_papago2theth.humidity'] = {
    'inventory_function': inventory_papouch_papago2theth_humidity,
    'check_function': check_papouch_papago2theth_humidity,
    'service_description': '%s',
    'has_perfdata': True,
    'group': 'humidity',
}
